{"version":3,"sources":["components/jumbotron.js","components/images.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","this","props","score","React","Component","Imgs","state","imgArray","idArray","_this","lose","setState","handleIncrement","id","event","console","log","shuffle","push","check","e","target","includes","jumbotron","src","onClick","alt","App","array","temp","i","length","j","Math","floor","random","components_images","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8b24872.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Jumbotron extends React.Component {\r\n    render() {\r\n        return (\r\n\r\n\r\n            <div>\r\n                <div className=\"jumbotron jumbotron-fluid\">\r\n                    <div className=\"container\">\r\n                       <h1 className=\"display-4\">Shaq Soda Clicky Game!</h1>\r\n                       <p>Click on some refreshing Shaq Soda to start the game!</p>\r\n                        <h2 className=\"display-4\">{this.props.score()}</h2>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n};\r\n\r\nexport default Jumbotron;","import React from \"react\";\r\nimport Jumbotron from './jumbotron';\r\n\r\nclass Imgs extends React.Component {\r\n\r\n    state = {\r\n        score: 0,\r\n        imgArray: [\r\n            \"https://i.imgur.com/b22hoNL.jpg\",\r\n            \"https://i.imgur.com/BOdRCxI.jpg\",\r\n            \"https://i.imgur.com/yRPMOqQ.jpg\",\r\n            \"https://i.imgur.com/XQbWfGj.jpg\",\r\n            \"https://i.imgur.com/oNKkES9.jpg\",\r\n            \"https://i.imgur.com/U2rzVdl.jpg\",\r\n            \"https://i.imgur.com/qKYMzKW.jpg\",\r\n            \"https://i.imgur.com/Y9abwVx.jpg\",\r\n            \"https://i.imgur.com/umNNCxM.jpg\",\r\n            \"https://i.imgur.com/uImwRjW.jpg\",\r\n            \"https://i.imgur.com/Zeju7er.jpg\",\r\n            \"https://i.imgur.com/WakL92w.jpg\"\r\n        ],\r\n        idArray: []\r\n    };\r\n\r\n    score = () => {\r\n        return (\r\n            <div className=\"text-center\">\r\n                <p>Score: {this.state.score}/12</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    lose = () => {\r\n        this.setState({\r\n            score: 0,\r\n            idArray: []\r\n        })\r\n    }\r\n\r\n    handleIncrement = (id, idArray, event) => {\r\n        if (idArray) {\r\n            console.log('clicked twice')\r\n            this.lose();\r\n            this.setState(this.props.shuffle(this.state.imgArray));\r\n        }\r\n        else {\r\n            this.state.idArray.push(id)\r\n            this.setState({ score: this.state.score + 1 })\r\n            this.setState(this.props.shuffle(this.state.imgArray))\r\n            console.log(this.state.idArray);\r\n        }\r\n\r\n    }\r\n\r\n    check = e => {\r\n        const id = e.target.id;\r\n        const idArray = this.state.idArray.includes(id);\r\n        this.handleIncrement(id, idArray)\r\n        console.log(\"its checking\")\r\n    };\r\n\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Jumbotron score={this.score} />\r\n           \r\n            <div className=\"w-50 mx-auto\">\r\n                \r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images border border-dark d-block mx-auto \" id={this.state.imgArray[0]} src={this.state.imgArray[0]} onClick={this.check} alt=\"shaq soda\"  ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[1]} src={this.state.imgArray[1]} onClick={this.check} alt=\"shaq soda\"  ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[2]} src={this.state.imgArray[2]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[3]} src={this.state.imgArray[3]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[4]} src={this.state.imgArray[4]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[5]} src={this.state.imgArray[5]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[6]} src={this.state.imgArray[6]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[7]} src={this.state.imgArray[7]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[8]} src={this.state.imgArray[8]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[9]} src={this.state.imgArray[9]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images  \" id={this.state.imgArray[10]} src={this.state.imgArray[10]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                    <div className=\"col-sm-3\">\r\n                        <img className=\"images d-block mx-auto border border-dark\" id={this.state.imgArray[11]} src={this.state.imgArray[11]} onClick={this.check} alt=\"shaq soda\" ></img>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n};\r\n\r\n\r\nexport default Imgs;","import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Imgs from './components/images';\n// import Jumbotron from './components/jumbotron';\n\n\nclass App extends Component {\n  shuffle = (array) => {\n    let\n      i = array.length,\n      j = 0,\n      temp;\n    while (i--) {\n      j = Math.floor(Math.random() * (i + 1));\n\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array\n  };\n\n  render() {\n    return (\n      <div className=\"App container-fluid\">\n        <Imgs shuffle={this.shuffle} />\n      </div>\n    );\n  }\n\n}\n\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}